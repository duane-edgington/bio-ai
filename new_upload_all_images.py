import os
from pathlib import Path
import tator


def init_api() -> tator.api:
    if 'TATOR_API_HOST' not in os.environ:
        print('TATOR_API_HOST not found in environment variables!')
        return
    if 'TATOR_API_TOKEN' not in os.environ:
        print('TATOR_API_TOKEN not found in environment variables!')
        return

    try:
        api = tator.get_api(os.environ['TATOR_API_HOST'], os.environ['TATOR_API_TOKEN'])
        print(api)
        return api
    except Exception as e:
        print(e)
        exit(-1)


def find_project(api: tator.api, project_name: str) -> tator.models.Project:
    try:
        projects = api.get_project_list()
        print(projects)

        # Find the project by name
        project = [p for p in projects if p.name == project_name]
        if len(project) == 0:
            print(f'Could not find project {project_name}')
            return

        p = project[0]
        return p
    except Exception as e:
        print(e)
        exit(-1)

    return None


from PIL import Image
from PIL.ExifTags import TAGS
def get_exif_data(image_path):
    with Image.open(image_path) as img:
        exif_data = img._getexif()
    if exif_data is None:
        return None
    exif = {}
    for tag_id, value in exif_data.items():
        tag = TAGS.get(tag_id, tag_id)
        exif[tag] = value
    return exif
def upload_and_create_media(api, project_id, file_path: Path, type_id: int = 1, section: str = "All Media"):
    """
    Upload a media file to Tator and create a media object.
    :param api: The Tator API object.
    :param project_id: The project ID.
    :param file_path: The path to the file to upload.
    :param type_id: The media type ID. 1 is image, 2 is video.
    :param media_id: The media ID. If None, a new media object will be created. If not None, the media object will be updated.
    """

    # Read in the exif data - this was autogenerated with Co-pilot; UNTESTED
    import piexif
    exif = piexif.load(file_path.as_posix())
    ## alternative is to use PIL (PILLOW) library where all exif is one dictionary
    #exif = get_exif_data(file_path.as_posix())
    # # Get the date and time the image was taken

    date_time = exif['Exif'][piexif.ExifIFD.DateTimeOriginal].decode('utf-8')
    print(date_time)
    # # Get the date the image was taken
    date = date_time.split(' ')[0]
    print(date)
    print(str(date))
    # # Get the time the image was taken
    time = date_time.split(' ')[1]
    print(time)
    print(str(time))
    # # Get the latitude and longitude the image was taken
    lat = exif['GPS'][piexif.GPSIFD.GPSLatitude]
    lon = exif['GPS'][piexif.GPSIFD.GPSLongitude]
    # # Convert the latitude and longitude to decimal degrees
    lat = lat[0][0] / lat[0][1] + lat[1][0] / lat[1][1] / 60 + lat[2][0] / lat[2][1] / 3600
    lon = lon[0][0] / lon[0][1] + lon[1][0] / lon[1][1] / 60 + lon[2][0] / lon[2][1] / 3600
    # # Convert the latitude and longitude to negative if necessary
    if exif['GPS'][piexif.GPSIFD.GPSLatitudeRef] == 'S':
         lat = -lat
    # if exif['GPS'][piexif.GPSIFD.GPSLongitudeRef] == 'W':
         lon = -lon
    # # Get the altitude the image was taken
    alt = exif['GPS'][piexif.GPSIFD.GPSAltitude][0] / exif['GPS'][piexif.GPSIFD.GPSAltitude][1]
    print('alt',alt)
    # # Get the camera model
    camera = exif['0th'][piexif.ImageIFD.Model].decode('utf-8')
    # # Get the camera make
    make = exif['0th'][piexif.ImageIFD.Make].decode('utf-8')
    # # Get the camera serial number
    # serial = exif['Exif'][piexif.ExifIFD.BodySerialNumber].decode('utf-8')
    # # Get the camera model
    model = exif['0th'][piexif.ImageIFD.Model].decode('utf-8')

    from PIL import Image
    from PIL.ExifTags import TAGS




    try:
        # see https://github.com/cvisionai/tator-py/blob/1cb7b2a41fab6c2eb95af603004e3c5873e8539d/tator/util/upload_media.py
        for progress, response in tator.util.upload_media(api,
                                                          section=section,
                                                          attributes={
                                                              'date': str(date),
                                                              'time': str(time),
                                                              'lat': str(lat),
                                                              'lon': str(lon),
                                                              'GPSAltitude': str(alt),
                                                              'Make': str(make),
                                                              'Model': str(model)
                                                              #'Pitch': str(p)
                                                              }, # <--- put attributes in a dictionary here
                                                          type_id=type_id,
                                                          fname=file_path.name,
                                                          path=file_path.as_posix()):
            print(f"Upload progress: {progress}%")
        print(response.message)
    except Exception as e:
        if 'object has no attribute' not in str(e):
            print(f"Error uploading {file_path.name}: {e}")


def run():
    project_name = "duane-test-901902-uavs"
    os.environ['TATOR_API_HOST'] = "http://DiGiTS-Dev-Box-Fish.shore.mbari.org"
    os.environ['TATOR_API_TOKEN'] = "123456789abcde"  # <====== CHANGE THIS TO YOUR TOKEN

    image_path = Path(
        '/Volumes/UAV/FlightLogs/20230412-MBARI/postProcess/FLY_0026/FLY_0026_Geotagged/RX1RII/DSC01547.JPG')

    api = init_api()
    project = find_project(api, project_name)
    if project is None:
        print(f'Could not find project {project_name}')
        return

    media_types = api.get_media_type_list(project.id)
    image_type = None
    for m in media_types:
        if m.dtype == "image":
            image_type = m.id
            break

    ##upload one file
    #upload_and_create_media(api, project, image_path, image_type, '20230412-MBARI') ##upload one file

    # the following line uploads all the files that meet the criteria in a directory
    # see glob.glob
    for f in image_path.parent.glob('*.JPG'):
        print(f)
        upload_and_create_media(api, project, f, image_type, 'test-20230412-MBARI')


if __name__ == "__main__":
    run()
